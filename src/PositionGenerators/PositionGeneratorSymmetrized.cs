#region License notice

/*
  This file is part of the CeresTrain project at https://github.com/dje-dev/cerestrain.
  Copyright (C) 2023- by David Elliott and the CeresTrain Authors.

  Ceres is free software under the terms of the GNU General Public License v3.0.
  You should have received a copy of the GNU General Public License
  along with CeresTrain. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

#region Using directives

using System;
using Ceres.Chess;

#endregion

namespace CeresTrain.PositionGenerators
{
  /// <summary>
  /// Returns a position from the underlying generator followed by
  /// its mirror image.
  /// 
  /// TODO: potentially additional symmetries could be added.
  /// </summary>
  public record class PositionGeneratorSymmetrized : PositionGenerator
  {
    /// <summary>
    ///  Underlying base generator.
    /// </summary>
    public readonly PositionGenerator BaseGenerator;

    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="id"></param>
    /// <exception cref="ArgumentNullException"></exception>
    public PositionGeneratorSymmetrized(PositionGenerator baseGenerator) : base(baseGenerator.ID + "_symmetrized")
    {
      BaseGenerator = baseGenerator;
    }


    [ThreadStatic]
    static Position positionPendingMirroring;


    /// <summary>
    /// The generator function.
    /// </summary>
    public override Position GeneratePosition()
    {
      Position pos;

      if (positionPendingMirroring.PieceCount > 0)
      {
        pos = positionPendingMirroring.Mirrored;
        positionPendingMirroring = default;
      }
      else
      {
        pos = BaseGenerator.GeneratePosition();
        positionPendingMirroring = pos;
      }

      return pos;
    }


    /// <summary>
    /// Returns if the specified position could be generated by this generator.
    /// </summary>
    /// <param name="pos"></param>
    /// <returns></returns>
    public override bool PositionMatches(in Position pos) => BaseGenerator.PositionMatches(in pos);

  }
}
