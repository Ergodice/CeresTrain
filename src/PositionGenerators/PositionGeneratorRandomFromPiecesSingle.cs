#region License notice

/*
  This file is part of the CeresTrain project at https://github.com/dje-dev/cerestrain.
  Copyright (C) 2023- by David Elliott and the CeresTrain Authors.

  Ceres is free software under the terms of the GNU General Public License v3.0.
  You should have received a copy of the GNU General Public License
  along with CeresTrain. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

#region Using directives

using Ceres.Chess;

#endregion

namespace CeresTrain.PositionGenerators
{
  #region License notice

  /*
    This file is part of the CeresTrain project at https://github.com/dje-dev/cerestrain.
    Copyright (C) 2023- by David Elliott and the CeresTrain Authors.

    Ceres is free software under the terms of the GNU General Public License v3.0.
    You should have received a copy of the GNU General Public License
    along with CeresTrain. If not, see <http://www.gnu.org/licenses/>.
  */

  #endregion

  /// <summary>
  /// Generates random positions containing specified pieces,
  /// arranged randomly on the chessboard (with legality assured).
  /// </summary>
  public sealed record class PositionGeneratorRandomFromPiecesSingle : PositionGenerator
  {
    /// <summary>
    /// String indicating pieces, e.g. "KPQkpq".
    /// </summary>
    public readonly PieceList PieceList;


    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="piecesString"></param>
    public PositionGeneratorRandomFromPiecesSingle(string piecesString) : base("rand_" + piecesString)
    {
      PieceList = new PieceList(piecesString);
    }


    /// <summary>
    /// Returns another position from the generator.
    /// </summary>
    public override Position GeneratePosition()
    {
      return RandomPositionGeneratorUtils.GenEndgame(PieceList.Pieces);
    }


    /// <summary>
    /// Returns if the specified position could be generated by this generator.
    /// </summary>
    /// <param name="pos"></param>
    /// <returns></returns>
    public override bool PositionMatches(in Position pos) => PieceList.PositionMatches(in pos);
  }
}


