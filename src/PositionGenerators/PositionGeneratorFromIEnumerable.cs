#region License notice

/*
  This file is part of the CeresTrain project at https://github.com/dje-dev/cerestrain.
  Copyright (C) 2023- by David Elliott and the CeresTrain Authors.

  Ceres is free software under the terms of the GNU General Public License v3.0.
  You should have received a copy of the GNU General Public License
  along with CeresTrain. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

#region Using directives

using System;
using System.Collections.Generic;
using Ceres.Chess;
using Ceres.Chess.Positions;

#endregion

namespace CeresTrain.PositionGenerators
{
  /// <summary>
  /// Subclass of PositionGenerator that generates positions a specified IEnumerable of Position (or PositionWithHistory).
  /// </summary>
  public record class PositionGeneratorFromIEnumerable : PositionGenerator
  {
    public readonly IEnumerator<Position> PositionsEnum;
    public readonly IEnumerator<PositionWithHistory> PositionWithHistoryEnum;
    public readonly Predicate<Position> MatchesPredicate;

    /// <summary>
    /// Constructor (for Position).  
    /// </summary>
    /// <param name="id"></param>
    /// <param name="matchesPredicate"></param>
    /// <param name="positions"></param>
    public PositionGeneratorFromIEnumerable(string id, Predicate<Position> matchesPredicate, IEnumerable<Position> positions) : base(id)
    {
      PositionsEnum = positions.GetEnumerator();
      MatchesPredicate = matchesPredicate;
    }


    /// <summary>
    /// Constructor (for PositionWithHistory).
    /// </summary>
    /// <param name="id"></param>
    /// <param name="matchesPredicate"></param>
    /// <param name="positionsWithHistory"></param>
    public PositionGeneratorFromIEnumerable(string id, Predicate<Position> matchesPredicate, IEnumerable<PositionWithHistory> positionsWithHistory) : base(id)
    {
      PositionWithHistoryEnum = positionsWithHistory.GetEnumerator();
      MatchesPredicate = matchesPredicate;
    }


    /// <summary>
    /// Sublass override which generates a new position.
    /// </summary>
    /// <returns></returns>
    /// <exception cref="InvalidOperationException"></exception>
    public override Position GeneratePosition()
    {
      if (PositionsEnum != null)
      {
        if (!PositionsEnum.MoveNext())
        {
          throw new InvalidOperationException("PositionGeneratorFromIEnumerable: No more positions.");
        }
        return PositionsEnum.Current;
      }
      else
      {
        if (!PositionWithHistoryEnum.MoveNext())
        {
          throw new InvalidOperationException("PositionGeneratorFromIEnumerable: No more positions.");
        }
        return PositionWithHistoryEnum.Current.FinalPosition;
      }
    }

    /// <summary>
    /// Returns if the specified position could be generated by this generator.
    /// </summary>
    /// <param name="pos"></param>
    /// <returns></returns>
    public override bool PositionMatches(in Position pos)
    {
      return MatchesPredicate(pos);
    }


    /// <summary>
    /// Generates a PositionWithHistory.
    /// </summary>
    /// <returns></returns>
    /// <exception cref="InvalidOperationException"></exception>
    public override PositionWithHistory GeneratePositionWithHistory()
    {
      {
        if (PositionsEnum == null)
        {
          return new PositionWithHistory(GeneratePosition());
        }
        else
        {
          if (!PositionWithHistoryEnum.MoveNext())
          {
            throw new InvalidOperationException("PositionGeneratorFromIEnumerable: No more positions.");
          }
          return PositionWithHistoryEnum.Current;
        }
      }
    }    
  } 
}
