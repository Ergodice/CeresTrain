#region License notice

/*
  This file is part of the CeresTrain project at https://github.com/dje-dev/cerestrain.
  Copyright (C) 2023- by David Elliott and the CeresTrain Authors.

  Ceres is free software under the terms of the GNU General Public License v3.0.
  You should have received a copy of the GNU General Public License
  along with CeresTrain. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

#region Using directives

using System;
using System.Collections.Generic;
using System.IO;

using Ceres.Chess;
using Ceres.Chess.Positions;

#endregion

namespace CeresTrain.PositionGenerators
{

  /// <summary>
  /// Abstract base class for a generator of Position.
  /// </summary>
  public abstract record class PositionGenerator
  {
    /// <summary>
    /// Short unique descriptive ID string.
    /// </summary>
    public string ID;

    /// <summary>
    /// The generator function.
    /// </summary>
    public abstract Position GeneratePosition();

    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="id"></param>
    /// <exception cref="ArgumentNullException"></exception>
    public PositionGenerator(string id)
    {
      ID = id ?? throw new ArgumentNullException(nameof(id));
    }

    /// <summary>
    /// Returns if the specified position could be generated by this generator.
    /// </summary>
    /// <param name="pos"></param>
    /// <returns></returns>
    public abstract bool PositionMatches(in Position pos);

    /// <summary>
    /// Returns another position from the generator 
    /// (wrapped as a PositionWithHistory, but having no actual history).
    /// </summary>
    /// <returns></returns>
    public virtual PositionWithHistory GeneratePositionWithHistory()
    {
      return new PositionWithHistory(GeneratePosition());
    }


    /// <summary>
    /// Wraps generator as an IEnumerable returning Position instances.
    /// </summary>
    /// <returns></returns>
    public virtual IEnumerable<Position> AsPositionEnumerable()
    {
      while (true)
      {
        yield return GeneratePosition();
      }
    }

    /// <summary>
    /// Wraps generator as an IEnumerable returning PositionWithHistory instances.
    /// </summary>
    /// <returns></returns>
    public virtual IEnumerable<PositionWithHistory> AsPositionWithHistoryEnumerable()
    {
      while (true)
      {
        yield return GeneratePositionWithHistory();
      }
    }

    #region Utility methods

    /// <summary>
    /// Generates a temporary file (EPD format) consisting of specified  
    /// number of positions returned by this generator.
    /// </summary>
    /// <param name="numPositions"></param>
    /// <returns></returns>
    public string GeneratedTestEPDFile(int numPositions = 100)
    {
      string text = "";
      string testFileName = Path.GetTempFileName() + ".epd";
      for (int i = 0; i < numPositions; i++)
      {
        text += GeneratePosition().FEN + Environment.NewLine;
      }
      File.WriteAllText(testFileName, text);
      return testFileName;
    }

    #endregion

  }
}
